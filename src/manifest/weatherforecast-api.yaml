# deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weatherforecast-api-deployment
  labels:
    app: weatherforecast-api-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: weatherforecast-api-deployment
  template:
    metadata:
      labels:
        app: weatherforecast-api-deployment
    spec:
      containers:
      - name: weatherforecast-api
        image: docker.io/daleospina/weatherforecast-api:0.1.0
        ports:
        - containerPort: 8080
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "250m"
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "Production"

---
# service.yaml
apiVersion: v1
kind: Service
metadata:
  name: weatherforecast-api-service
spec:
  selector:
    app: weatherforecast-api-deployment
  ports:
  - protocol: TCP
    name: http
    port: 80
    targetPort: 8080
  type: ClusterIP

---
# ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: weatherforecast-api-ingress
  annotations:
    kubernetes.io/ingress.class: nginx # Use the NGINX ingress controller
    cert-manager.io/cluster-issuer: letsencrypt-prod # Optional: For TLS with cert-manager
spec:
  rules:
  - host: weatherforecast.example.com # Replace with your domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: weatherforecast-api-service
            port:
              number: 80
  tls: # Optional: For HTTPS
  - hosts:
    - weatherforecast.example.com # Replace with your domain
    secretName: weatherforecast-tls # Secret for TLS certificates